#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class HeartBeatMessage:
  """
  Domino sends periodic heartbeats from
  Domino Clients and Domino Server echos

  Attributes:
   - messageType
   - domino_udid
   - seq_no
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 1, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 1
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeartBeatMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegisterMessage:
  """
  Domino Clients must first register with
  Domino Server. Clients can ask for a specific
  Unique Domino ID (UDID)

  Attributes:
   - messageType
   - domino_udid_desired
   - seq_no
   - ipaddr
   - tcpport
   - supported_templates
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 2, ), # 1
    (2, TType.STRING, 'domino_udid_desired', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.STRING, 'ipaddr', None, None, ), # 4
    (5, TType.I16, 'tcpport', None, None, ), # 5
    (6, TType.LIST, 'supported_templates', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid_desired=None, seq_no=None, ipaddr=None, tcpport=None, supported_templates=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 2
    self.messageType = messageType
    self.domino_udid_desired = domino_udid_desired
    self.seq_no = seq_no
    self.ipaddr = ipaddr
    self.tcpport = tcpport
    self.supported_templates = supported_templates

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid_desired = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ipaddr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.tcpport = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.supported_templates = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.supported_templates.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisterMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid_desired is not None:
      oprot.writeFieldBegin('domino_udid_desired', TType.STRING, 2)
      oprot.writeString(self.domino_udid_desired)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.ipaddr is not None:
      oprot.writeFieldBegin('ipaddr', TType.STRING, 4)
      oprot.writeString(self.ipaddr)
      oprot.writeFieldEnd()
    if self.tcpport is not None:
      oprot.writeFieldBegin('tcpport', TType.I16, 5)
      oprot.writeI16(self.tcpport)
      oprot.writeFieldEnd()
    if self.supported_templates is not None:
      oprot.writeFieldBegin('supported_templates', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.supported_templates))
      for iter6 in self.supported_templates:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid_desired)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.ipaddr)
    value = (value * 31) ^ hash(self.tcpport)
    value = (value * 31) ^ hash(self.supported_templates)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RegisterResponseMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - domino_udid_assigned
   - seq_no
   - responseCode
   - comments
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 3, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.STRING, 'domino_udid_assigned', None, None, ), # 3
    (4, TType.I64, 'seq_no', None, None, ), # 4
    (5, TType.BYTE, 'responseCode', None, None, ), # 5
    (6, TType.LIST, 'comments', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, domino_udid_assigned=None, seq_no=None, responseCode=None, comments=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 3
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.domino_udid_assigned = domino_udid_assigned
    self.seq_no = seq_no
    self.responseCode = responseCode
    self.comments = comments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.domino_udid_assigned = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.responseCode = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.comments = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString()
            self.comments.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RegisterResponseMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.domino_udid_assigned is not None:
      oprot.writeFieldBegin('domino_udid_assigned', TType.STRING, 3)
      oprot.writeString(self.domino_udid_assigned)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 4)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.BYTE, 5)
      oprot.writeByte(self.responseCode)
      oprot.writeFieldEnd()
    if self.comments is not None:
      oprot.writeFieldBegin('comments', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.comments))
      for iter13 in self.comments:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.domino_udid_assigned)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.comments)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - template_op
   - supported_template_types
   - label_op
   - labels
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 4, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.BYTE, 'template_op', None, None, ), # 4
    (5, TType.LIST, 'supported_template_types', (TType.STRING,None), None, ), # 5
    (6, TType.BYTE, 'label_op', None, None, ), # 6
    (7, TType.LIST, 'labels', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, template_op=None, supported_template_types=None, label_op=None, labels=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 4
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.template_op = template_op
    self.supported_template_types = supported_template_types
    self.label_op = label_op
    self.labels = labels

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.template_op = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.supported_template_types = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString()
            self.supported_template_types.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BYTE:
          self.label_op = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.labels = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readString()
            self.labels.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.template_op is not None:
      oprot.writeFieldBegin('template_op', TType.BYTE, 4)
      oprot.writeByte(self.template_op)
      oprot.writeFieldEnd()
    if self.supported_template_types is not None:
      oprot.writeFieldBegin('supported_template_types', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.supported_template_types))
      for iter26 in self.supported_template_types:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.label_op is not None:
      oprot.writeFieldBegin('label_op', TType.BYTE, 6)
      oprot.writeByte(self.label_op)
      oprot.writeFieldEnd()
    if self.labels is not None:
      oprot.writeFieldBegin('labels', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.labels))
      for iter27 in self.labels:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.template_op)
    value = (value * 31) ^ hash(self.supported_template_types)
    value = (value * 31) ^ hash(self.label_op)
    value = (value * 31) ^ hash(self.labels)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SubscribeResponseMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - responseCode
   - comments
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 5, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.BYTE, 'responseCode', None, None, ), # 4
    (5, TType.LIST, 'comments', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, responseCode=None, comments=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 5
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.responseCode = responseCode
    self.comments = comments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.responseCode = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.comments = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString()
            self.comments.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SubscribeResponseMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.BYTE, 4)
      oprot.writeByte(self.responseCode)
      oprot.writeFieldEnd()
    if self.comments is not None:
      oprot.writeFieldBegin('comments', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.comments))
      for iter34 in self.comments:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.comments)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PublishMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - template_type
   - template
   - template_UUID
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 6, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.STRING, 'template_type', None, None, ), # 4
    (5, TType.LIST, 'template', (TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'template_UUID', None, None, ), # 6
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, template_type=None, template=None, template_UUID=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 6
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.template_type = template_type
    self.template = template
    self.template_UUID = template_UUID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.template_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.template = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readString()
            self.template.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.template_UUID = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PublishMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.template_type is not None:
      oprot.writeFieldBegin('template_type', TType.STRING, 4)
      oprot.writeString(self.template_type)
      oprot.writeFieldEnd()
    if self.template is not None:
      oprot.writeFieldBegin('template', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.template))
      for iter41 in self.template:
        oprot.writeString(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.template_UUID is not None:
      oprot.writeFieldBegin('template_UUID', TType.STRING, 6)
      oprot.writeString(self.template_UUID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.template_type)
    value = (value * 31) ^ hash(self.template)
    value = (value * 31) ^ hash(self.template_UUID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DomainInfo:
  """
  Attributes:
   - ipaddr
   - tcpport
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ipaddr', None, None, ), # 1
    (2, TType.I16, 'tcpport', None, None, ), # 2
  )

  def __init__(self, ipaddr=None, tcpport=None,):
    self.ipaddr = ipaddr
    self.tcpport = tcpport

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ipaddr = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.tcpport = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DomainInfo')
    if self.ipaddr is not None:
      oprot.writeFieldBegin('ipaddr', TType.STRING, 1)
      oprot.writeString(self.ipaddr)
      oprot.writeFieldEnd()
    if self.tcpport is not None:
      oprot.writeFieldBegin('tcpport', TType.I16, 2)
      oprot.writeI16(self.tcpport)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ipaddr)
    value = (value * 31) ^ hash(self.tcpport)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PublishResponseMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - responseCode
   - template_UUID
   - domainInfo
   - comments
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 7, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.BYTE, 'responseCode', None, None, ), # 4
    (5, TType.STRING, 'template_UUID', None, None, ), # 5
    (6, TType.LIST, 'domainInfo', (TType.STRUCT,(DomainInfo, DomainInfo.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'comments', (TType.STRING,None), None, ), # 7
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, responseCode=None, template_UUID=None, domainInfo=None, comments=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 7
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.responseCode = responseCode
    self.template_UUID = template_UUID
    self.domainInfo = domainInfo
    self.comments = comments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.responseCode = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.template_UUID = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.domainInfo = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = DomainInfo()
            _elem47.read(iprot)
            self.domainInfo.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.comments = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readString()
            self.comments.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PublishResponseMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.BYTE, 4)
      oprot.writeByte(self.responseCode)
      oprot.writeFieldEnd()
    if self.template_UUID is not None:
      oprot.writeFieldBegin('template_UUID', TType.STRING, 5)
      oprot.writeString(self.template_UUID)
      oprot.writeFieldEnd()
    if self.domainInfo is not None:
      oprot.writeFieldBegin('domainInfo', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.domainInfo))
      for iter54 in self.domainInfo:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.comments is not None:
      oprot.writeFieldBegin('comments', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.comments))
      for iter55 in self.comments:
        oprot.writeString(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.template_UUID)
    value = (value * 31) ^ hash(self.domainInfo)
    value = (value * 31) ^ hash(self.comments)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PushMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - template_type
   - template
   - template_UUID
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 8, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.STRING, 'template_type', None, None, ), # 4
    (5, TType.LIST, 'template', (TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'template_UUID', None, None, ), # 6
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, template_type=None, template=None, template_UUID=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 8
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.template_type = template_type
    self.template = template
    self.template_UUID = template_UUID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.template_type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.template = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readString()
            self.template.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.template_UUID = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PushMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.template_type is not None:
      oprot.writeFieldBegin('template_type', TType.STRING, 4)
      oprot.writeString(self.template_type)
      oprot.writeFieldEnd()
    if self.template is not None:
      oprot.writeFieldBegin('template', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.template))
      for iter62 in self.template:
        oprot.writeString(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.template_UUID is not None:
      oprot.writeFieldBegin('template_UUID', TType.STRING, 6)
      oprot.writeString(self.template_UUID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.template_type)
    value = (value * 31) ^ hash(self.template)
    value = (value * 31) ^ hash(self.template_UUID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PushResponseMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - responseCode
   - comments
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 9, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.BYTE, 'responseCode', None, None, ), # 4
    (5, TType.LIST, 'comments', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, responseCode=None, comments=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 9
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.responseCode = responseCode
    self.comments = comments

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.responseCode = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.comments = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = iprot.readString()
            self.comments.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PushResponseMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.BYTE, 4)
      oprot.writeByte(self.responseCode)
      oprot.writeFieldEnd()
    if self.comments is not None:
      oprot.writeFieldBegin('comments', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.comments))
      for iter69 in self.comments:
        oprot.writeString(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.comments)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - queryString
   - template_UUID
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 10, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.LIST, 'queryString', (TType.STRING,None), None, ), # 4
    (5, TType.STRING, 'template_UUID', None, None, ), # 5
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, queryString=None, template_UUID=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 10
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.queryString = queryString
    self.template_UUID = template_UUID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.queryString = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readString()
            self.queryString.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.template_UUID = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.queryString is not None:
      oprot.writeFieldBegin('queryString', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.queryString))
      for iter76 in self.queryString:
        oprot.writeString(iter76)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.template_UUID is not None:
      oprot.writeFieldBegin('template_UUID', TType.STRING, 5)
      oprot.writeString(self.template_UUID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.queryString)
    value = (value * 31) ^ hash(self.template_UUID)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryResponseMessage:
  """
  Attributes:
   - messageType
   - domino_udid
   - seq_no
   - responseCode
   - queryResponse
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'messageType', None, 11, ), # 1
    (2, TType.STRING, 'domino_udid', None, None, ), # 2
    (3, TType.I64, 'seq_no', None, None, ), # 3
    (4, TType.BYTE, 'responseCode', None, None, ), # 4
    (5, TType.LIST, 'queryResponse', (TType.STRING,None), None, ), # 5
  )

  def __init__(self, messageType=thrift_spec[1][4], domino_udid=None, seq_no=None, responseCode=None, queryResponse=None,):
    if messageType is self.thrift_spec[1][4]:
      messageType = 11
    self.messageType = messageType
    self.domino_udid = domino_udid
    self.seq_no = seq_no
    self.responseCode = responseCode
    self.queryResponse = queryResponse

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.messageType = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.domino_udid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.seq_no = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.responseCode = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.queryResponse = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = iprot.readString()
            self.queryResponse.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryResponseMessage')
    if self.messageType is not None:
      oprot.writeFieldBegin('messageType', TType.BYTE, 1)
      oprot.writeByte(self.messageType)
      oprot.writeFieldEnd()
    if self.domino_udid is not None:
      oprot.writeFieldBegin('domino_udid', TType.STRING, 2)
      oprot.writeString(self.domino_udid)
      oprot.writeFieldEnd()
    if self.seq_no is not None:
      oprot.writeFieldBegin('seq_no', TType.I64, 3)
      oprot.writeI64(self.seq_no)
      oprot.writeFieldEnd()
    if self.responseCode is not None:
      oprot.writeFieldBegin('responseCode', TType.BYTE, 4)
      oprot.writeByte(self.responseCode)
      oprot.writeFieldEnd()
    if self.queryResponse is not None:
      oprot.writeFieldBegin('queryResponse', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.queryResponse))
      for iter83 in self.queryResponse:
        oprot.writeString(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.messageType)
    value = (value * 31) ^ hash(self.domino_udid)
    value = (value * 31) ^ hash(self.seq_no)
    value = (value * 31) ^ hash(self.responseCode)
    value = (value * 31) ^ hash(self.queryResponse)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
